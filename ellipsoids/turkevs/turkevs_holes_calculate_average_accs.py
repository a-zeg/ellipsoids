'''
This script takes the data generated by the calculate_turkevs.py script and 
calculates the accuriacies of the classification based on the ellipsoids persistence diagrams, 
as well as the other algorithms used in "On the effectiveness of persistent homology".
'''


import os
import data_handling
# from data_handling import find_subfolder_with_given_id
import plots
import matplotlib.pyplot as plt


if __name__ == '__main__':

    parentfolder = 'data/turkevs_20240529/data'
    id = 'id=0005' # 0001 is the first downsampled, also calculated with the prev version of the code
    path_results = os.path.join(parentfolder, id+'_results')

    path_results = 'data/turkevs_20240529/data/id=0005_results_20240605_144652'
    if not os.path.isdir(path_results):
        exit('Error: folder ' + path_results + ' does not exist.')


    paths = data_handling.get_paths_of_files_in_a_folder(path_results, '.json')
    paths = [path for path in paths if 'variables' in path]
    if len(paths) == 0:
        exit('Error: no valid paths found.')

    accs_sum = {}
    key_counts = {}
    pipelines = []

    for path in paths:
        accs = {}
        json_vars = data_handling.read_variables(path)
        if 'accs' in json_vars:
            accs = json_vars['accs']
        else:
            print('Skipping file ' + path + '; no accs found.')

        # want to handle cases where not all files have all the algorithms
        # (e.g. ML is missing in half the files), so have to keep track
        # of the number of occurences
        for key in accs:
            if key not in accs_sum:
                accs_sum[key] = [0]*len(accs[key])
                key_counts[key] = 0
                pipelines.append(key)
            accs_sum[key] = [sum(pairs) for pairs in zip(accs_sum[key], accs[key])]
            key_counts[key] += 1
    
    average_accs = {}
    for key in accs_sum:
        average_accs[key] = [x / key_counts[key] for x in accs_sum[key]]

    vars_to_save = {}
    vars_to_save['average_accs'] = average_accs
    vars_to_save['accs_file_paths'] = paths

    unique_id = id + data_handling.get_timestamp()

    filename_save_vars = os.path.join(path_results,'turkevs_average_' + unique_id)
    data_handling.save_variables(vars_to_save, filename=filename_save_vars, timestamp=False)

    transformations = ["original", "translation", "rotation", "stretch", "shear", "gaussian", "outliers"]
    fig = plots.plot_bar_chart(transformations, average_accs, pipelines)
    plt.savefig(os.path.join(path_results, "accs_trnsfs_averages_" + unique_id), bbox_inches = "tight")


